# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import filesystem_extended_pb2 as proto_dot_filesystem__extended__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in proto/filesystem_extended_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FileSystemServiceStub(object):
    """========================================
    SERVIÇOS PRINCIPAIS
    ========================================

    Serviço que representa operações sobre um sistema de arquivos distribuído
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Listar = channel.unary_unary(
                '/filesystem.FileSystemService/Listar',
                request_serializer=proto_dot_filesystem__extended__pb2.CaminhoRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.ConteudoResponse.FromString,
                _registered_method=True)
        self.Copiar = channel.unary_unary(
                '/filesystem.FileSystemService/Copiar',
                request_serializer=proto_dot_filesystem__extended__pb2.CopyRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
                _registered_method=True)
        self.Upload = channel.unary_unary(
                '/filesystem.FileSystemService/Upload',
                request_serializer=proto_dot_filesystem__extended__pb2.FileUploadRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
                _registered_method=True)
        self.Download = channel.unary_unary(
                '/filesystem.FileSystemService/Download',
                request_serializer=proto_dot_filesystem__extended__pb2.CaminhoRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.FileDownloadResponse.FromString,
                _registered_method=True)
        self.CopiarInterno = channel.unary_unary(
                '/filesystem.FileSystemService/CopiarInterno',
                request_serializer=proto_dot_filesystem__extended__pb2.CopyRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
                _registered_method=True)
        self.Deletar = channel.unary_unary(
                '/filesystem.FileSystemService/Deletar',
                request_serializer=proto_dot_filesystem__extended__pb2.CaminhoRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
                _registered_method=True)
        self.UploadChunk = channel.unary_unary(
                '/filesystem.FileSystemService/UploadChunk',
                request_serializer=proto_dot_filesystem__extended__pb2.ChunkUploadRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
                _registered_method=True)
        self.DownloadChunk = channel.unary_unary(
                '/filesystem.FileSystemService/DownloadChunk',
                request_serializer=proto_dot_filesystem__extended__pb2.ChunkRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.ChunkDownloadResponse.FromString,
                _registered_method=True)
        self.DeleteChunk = channel.unary_unary(
                '/filesystem.FileSystemService/DeleteChunk',
                request_serializer=proto_dot_filesystem__extended__pb2.ChunkRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
                _registered_method=True)
        self.ReplicarChunk = channel.unary_unary(
                '/filesystem.FileSystemService/ReplicarChunk',
                request_serializer=proto_dot_filesystem__extended__pb2.ReplicationRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
                _registered_method=True)
        self.SincronizarReplica = channel.unary_unary(
                '/filesystem.FileSystemService/SincronizarReplica',
                request_serializer=proto_dot_filesystem__extended__pb2.SyncRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
                _registered_method=True)
        self.Heartbeat = channel.unary_unary(
                '/filesystem.FileSystemService/Heartbeat',
                request_serializer=proto_dot_filesystem__extended__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.HeartbeatResponse.FromString,
                _registered_method=True)
        self.VerificarIntegridade = channel.unary_unary(
                '/filesystem.FileSystemService/VerificarIntegridade',
                request_serializer=proto_dot_filesystem__extended__pb2.IntegrityRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.IntegrityResponse.FromString,
                _registered_method=True)


class FileSystemServiceServicer(object):
    """========================================
    SERVIÇOS PRINCIPAIS
    ========================================

    Serviço que representa operações sobre um sistema de arquivos distribuído
    """

    def Listar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Copiar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Upload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Download(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CopiarInterno(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Deletar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadChunk(self, request, context):
        """Novas operações para chunks
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadChunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteChunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicarChunk(self, request, context):
        """Operações de replicação
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SincronizarReplica(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """Heartbeat para detecção de falhas
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerificarIntegridade(self, request, context):
        """Verificação de integridade
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileSystemServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Listar': grpc.unary_unary_rpc_method_handler(
                    servicer.Listar,
                    request_deserializer=proto_dot_filesystem__extended__pb2.CaminhoRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.ConteudoResponse.SerializeToString,
            ),
            'Copiar': grpc.unary_unary_rpc_method_handler(
                    servicer.Copiar,
                    request_deserializer=proto_dot_filesystem__extended__pb2.CopyRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.SerializeToString,
            ),
            'Upload': grpc.unary_unary_rpc_method_handler(
                    servicer.Upload,
                    request_deserializer=proto_dot_filesystem__extended__pb2.FileUploadRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.SerializeToString,
            ),
            'Download': grpc.unary_unary_rpc_method_handler(
                    servicer.Download,
                    request_deserializer=proto_dot_filesystem__extended__pb2.CaminhoRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.FileDownloadResponse.SerializeToString,
            ),
            'CopiarInterno': grpc.unary_unary_rpc_method_handler(
                    servicer.CopiarInterno,
                    request_deserializer=proto_dot_filesystem__extended__pb2.CopyRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.SerializeToString,
            ),
            'Deletar': grpc.unary_unary_rpc_method_handler(
                    servicer.Deletar,
                    request_deserializer=proto_dot_filesystem__extended__pb2.CaminhoRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.SerializeToString,
            ),
            'UploadChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadChunk,
                    request_deserializer=proto_dot_filesystem__extended__pb2.ChunkUploadRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.SerializeToString,
            ),
            'DownloadChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadChunk,
                    request_deserializer=proto_dot_filesystem__extended__pb2.ChunkRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.ChunkDownloadResponse.SerializeToString,
            ),
            'DeleteChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteChunk,
                    request_deserializer=proto_dot_filesystem__extended__pb2.ChunkRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.SerializeToString,
            ),
            'ReplicarChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicarChunk,
                    request_deserializer=proto_dot_filesystem__extended__pb2.ReplicationRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.SerializeToString,
            ),
            'SincronizarReplica': grpc.unary_unary_rpc_method_handler(
                    servicer.SincronizarReplica,
                    request_deserializer=proto_dot_filesystem__extended__pb2.SyncRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=proto_dot_filesystem__extended__pb2.HeartbeatRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.HeartbeatResponse.SerializeToString,
            ),
            'VerificarIntegridade': grpc.unary_unary_rpc_method_handler(
                    servicer.VerificarIntegridade,
                    request_deserializer=proto_dot_filesystem__extended__pb2.IntegrityRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.IntegrityResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'filesystem.FileSystemService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('filesystem.FileSystemService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FileSystemService(object):
    """========================================
    SERVIÇOS PRINCIPAIS
    ========================================

    Serviço que representa operações sobre um sistema de arquivos distribuído
    """

    @staticmethod
    def Listar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.FileSystemService/Listar',
            proto_dot_filesystem__extended__pb2.CaminhoRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.ConteudoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Copiar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.FileSystemService/Copiar',
            proto_dot_filesystem__extended__pb2.CopyRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Upload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.FileSystemService/Upload',
            proto_dot_filesystem__extended__pb2.FileUploadRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Download(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.FileSystemService/Download',
            proto_dot_filesystem__extended__pb2.CaminhoRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.FileDownloadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CopiarInterno(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.FileSystemService/CopiarInterno',
            proto_dot_filesystem__extended__pb2.CopyRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Deletar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.FileSystemService/Deletar',
            proto_dot_filesystem__extended__pb2.CaminhoRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.FileSystemService/UploadChunk',
            proto_dot_filesystem__extended__pb2.ChunkUploadRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DownloadChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.FileSystemService/DownloadChunk',
            proto_dot_filesystem__extended__pb2.ChunkRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.ChunkDownloadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.FileSystemService/DeleteChunk',
            proto_dot_filesystem__extended__pb2.ChunkRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplicarChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.FileSystemService/ReplicarChunk',
            proto_dot_filesystem__extended__pb2.ReplicationRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SincronizarReplica(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.FileSystemService/SincronizarReplica',
            proto_dot_filesystem__extended__pb2.SyncRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.FileSystemService/Heartbeat',
            proto_dot_filesystem__extended__pb2.HeartbeatRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerificarIntegridade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.FileSystemService/VerificarIntegridade',
            proto_dot_filesystem__extended__pb2.IntegrityRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.IntegrityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MetadataServiceStub(object):
    """Serviço de Metadados - gerencia informações sobre arquivos, chunks e nós
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListarArquivos = channel.unary_unary(
                '/filesystem.MetadataService/ListarArquivos',
                request_serializer=proto_dot_filesystem__extended__pb2.CaminhoRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.FileListResponse.FromString,
                _registered_method=True)
        self.RegistrarArquivo = channel.unary_unary(
                '/filesystem.MetadataService/RegistrarArquivo',
                request_serializer=proto_dot_filesystem__extended__pb2.FileMetadataRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
                _registered_method=True)
        self.ObterMetadataArquivo = channel.unary_unary(
                '/filesystem.MetadataService/ObterMetadataArquivo',
                request_serializer=proto_dot_filesystem__extended__pb2.CaminhoRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.FileMetadataResponse.FromString,
                _registered_method=True)
        self.RemoverArquivo = channel.unary_unary(
                '/filesystem.MetadataService/RemoverArquivo',
                request_serializer=proto_dot_filesystem__extended__pb2.CaminhoRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
                _registered_method=True)
        self.MarcarArquivoCompleto = channel.unary_unary(
                '/filesystem.MetadataService/MarcarArquivoCompleto',
                request_serializer=proto_dot_filesystem__extended__pb2.CaminhoRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
                _registered_method=True)
        self.RegistrarChunk = channel.unary_unary(
                '/filesystem.MetadataService/RegistrarChunk',
                request_serializer=proto_dot_filesystem__extended__pb2.ChunkMetadataRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
                _registered_method=True)
        self.ObterLocalizacaoChunks = channel.unary_unary(
                '/filesystem.MetadataService/ObterLocalizacaoChunks',
                request_serializer=proto_dot_filesystem__extended__pb2.CaminhoRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.ChunkLocationResponse.FromString,
                _registered_method=True)
        self.RemoverChunk = channel.unary_unary(
                '/filesystem.MetadataService/RemoverChunk',
                request_serializer=proto_dot_filesystem__extended__pb2.ChunkRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
                _registered_method=True)
        self.GetChunkInfo = channel.unary_unary(
                '/filesystem.MetadataService/GetChunkInfo',
                request_serializer=proto_dot_filesystem__extended__pb2.ChunkRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.ChunkMetadataResponse.FromString,
                _registered_method=True)
        self.RegistrarNo = channel.unary_unary(
                '/filesystem.MetadataService/RegistrarNo',
                request_serializer=proto_dot_filesystem__extended__pb2.NodeRegistrationRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.NodeRegistrationResponse.FromString,
                _registered_method=True)
        self.ObterNosDisponiveis = channel.unary_unary(
                '/filesystem.MetadataService/ObterNosDisponiveis',
                request_serializer=proto_dot_filesystem__extended__pb2.NodesRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.NodesResponse.FromString,
                _registered_method=True)
        self.ReportarFalhaNo = channel.unary_unary(
                '/filesystem.MetadataService/ReportarFalhaNo',
                request_serializer=proto_dot_filesystem__extended__pb2.NodeFailureRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
                _registered_method=True)
        self.GetNodeInfo = channel.unary_unary(
                '/filesystem.MetadataService/GetNodeInfo',
                request_serializer=proto_dot_filesystem__extended__pb2.NodeInfoRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.NodeInfoResponse.FromString,
                _registered_method=True)
        self.ObterNoParaOperacao = channel.unary_unary(
                '/filesystem.MetadataService/ObterNoParaOperacao',
                request_serializer=proto_dot_filesystem__extended__pb2.OperationRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.NodeResponse.FromString,
                _registered_method=True)
        self.ObterReplicasDisponiveis = channel.unary_unary(
                '/filesystem.MetadataService/ObterReplicasDisponiveis',
                request_serializer=proto_dot_filesystem__extended__pb2.ReplicaRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.ReplicaResponse.FromString,
                _registered_method=True)
        self.ConfirmarReplica = channel.unary_unary(
                '/filesystem.MetadataService/ConfirmarReplica',
                request_serializer=proto_dot_filesystem__extended__pb2.ConfirmReplicaRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
                _registered_method=True)
        self.ProcessarHeartbeat = channel.unary_unary(
                '/filesystem.MetadataService/ProcessarHeartbeat',
                request_serializer=proto_dot_filesystem__extended__pb2.HeartbeatData.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
                _registered_method=True)
        self.ObterStatusSistema = channel.unary_unary(
                '/filesystem.MetadataService/ObterStatusSistema',
                request_serializer=proto_dot_filesystem__extended__pb2.StatusRequest.SerializeToString,
                response_deserializer=proto_dot_filesystem__extended__pb2.StatusResponse.FromString,
                _registered_method=True)


class MetadataServiceServicer(object):
    """Serviço de Metadados - gerencia informações sobre arquivos, chunks e nós
    """

    def ListarArquivos(self, request, context):
        """Gerenciamento de arquivos
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegistrarArquivo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObterMetadataArquivo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoverArquivo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarcarArquivoCompleto(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegistrarChunk(self, request, context):
        """Gerenciamento de chunks
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObterLocalizacaoChunks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoverChunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChunkInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegistrarNo(self, request, context):
        """Gerenciamento de nós
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObterNosDisponiveis(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportarFalhaNo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNodeInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObterNoParaOperacao(self, request, context):
        """Operações de redirecionamento
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObterReplicasDisponiveis(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfirmarReplica(self, request, context):
        """Confirmação de réplicas
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessarHeartbeat(self, request, context):
        """Monitoramento e saúde
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObterStatusSistema(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetadataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListarArquivos': grpc.unary_unary_rpc_method_handler(
                    servicer.ListarArquivos,
                    request_deserializer=proto_dot_filesystem__extended__pb2.CaminhoRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.FileListResponse.SerializeToString,
            ),
            'RegistrarArquivo': grpc.unary_unary_rpc_method_handler(
                    servicer.RegistrarArquivo,
                    request_deserializer=proto_dot_filesystem__extended__pb2.FileMetadataRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.SerializeToString,
            ),
            'ObterMetadataArquivo': grpc.unary_unary_rpc_method_handler(
                    servicer.ObterMetadataArquivo,
                    request_deserializer=proto_dot_filesystem__extended__pb2.CaminhoRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.FileMetadataResponse.SerializeToString,
            ),
            'RemoverArquivo': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoverArquivo,
                    request_deserializer=proto_dot_filesystem__extended__pb2.CaminhoRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.SerializeToString,
            ),
            'MarcarArquivoCompleto': grpc.unary_unary_rpc_method_handler(
                    servicer.MarcarArquivoCompleto,
                    request_deserializer=proto_dot_filesystem__extended__pb2.CaminhoRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.SerializeToString,
            ),
            'RegistrarChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.RegistrarChunk,
                    request_deserializer=proto_dot_filesystem__extended__pb2.ChunkMetadataRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.SerializeToString,
            ),
            'ObterLocalizacaoChunks': grpc.unary_unary_rpc_method_handler(
                    servicer.ObterLocalizacaoChunks,
                    request_deserializer=proto_dot_filesystem__extended__pb2.CaminhoRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.ChunkLocationResponse.SerializeToString,
            ),
            'RemoverChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoverChunk,
                    request_deserializer=proto_dot_filesystem__extended__pb2.ChunkRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.SerializeToString,
            ),
            'GetChunkInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChunkInfo,
                    request_deserializer=proto_dot_filesystem__extended__pb2.ChunkRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.ChunkMetadataResponse.SerializeToString,
            ),
            'RegistrarNo': grpc.unary_unary_rpc_method_handler(
                    servicer.RegistrarNo,
                    request_deserializer=proto_dot_filesystem__extended__pb2.NodeRegistrationRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.NodeRegistrationResponse.SerializeToString,
            ),
            'ObterNosDisponiveis': grpc.unary_unary_rpc_method_handler(
                    servicer.ObterNosDisponiveis,
                    request_deserializer=proto_dot_filesystem__extended__pb2.NodesRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.NodesResponse.SerializeToString,
            ),
            'ReportarFalhaNo': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportarFalhaNo,
                    request_deserializer=proto_dot_filesystem__extended__pb2.NodeFailureRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.SerializeToString,
            ),
            'GetNodeInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNodeInfo,
                    request_deserializer=proto_dot_filesystem__extended__pb2.NodeInfoRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.NodeInfoResponse.SerializeToString,
            ),
            'ObterNoParaOperacao': grpc.unary_unary_rpc_method_handler(
                    servicer.ObterNoParaOperacao,
                    request_deserializer=proto_dot_filesystem__extended__pb2.OperationRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.NodeResponse.SerializeToString,
            ),
            'ObterReplicasDisponiveis': grpc.unary_unary_rpc_method_handler(
                    servicer.ObterReplicasDisponiveis,
                    request_deserializer=proto_dot_filesystem__extended__pb2.ReplicaRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.ReplicaResponse.SerializeToString,
            ),
            'ConfirmarReplica': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfirmarReplica,
                    request_deserializer=proto_dot_filesystem__extended__pb2.ConfirmReplicaRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.SerializeToString,
            ),
            'ProcessarHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessarHeartbeat,
                    request_deserializer=proto_dot_filesystem__extended__pb2.HeartbeatData.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.OperacaoResponse.SerializeToString,
            ),
            'ObterStatusSistema': grpc.unary_unary_rpc_method_handler(
                    servicer.ObterStatusSistema,
                    request_deserializer=proto_dot_filesystem__extended__pb2.StatusRequest.FromString,
                    response_serializer=proto_dot_filesystem__extended__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'filesystem.MetadataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('filesystem.MetadataService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MetadataService(object):
    """Serviço de Metadados - gerencia informações sobre arquivos, chunks e nós
    """

    @staticmethod
    def ListarArquivos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.MetadataService/ListarArquivos',
            proto_dot_filesystem__extended__pb2.CaminhoRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.FileListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegistrarArquivo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.MetadataService/RegistrarArquivo',
            proto_dot_filesystem__extended__pb2.FileMetadataRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ObterMetadataArquivo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.MetadataService/ObterMetadataArquivo',
            proto_dot_filesystem__extended__pb2.CaminhoRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.FileMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoverArquivo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.MetadataService/RemoverArquivo',
            proto_dot_filesystem__extended__pb2.CaminhoRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MarcarArquivoCompleto(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.MetadataService/MarcarArquivoCompleto',
            proto_dot_filesystem__extended__pb2.CaminhoRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegistrarChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.MetadataService/RegistrarChunk',
            proto_dot_filesystem__extended__pb2.ChunkMetadataRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ObterLocalizacaoChunks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.MetadataService/ObterLocalizacaoChunks',
            proto_dot_filesystem__extended__pb2.CaminhoRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.ChunkLocationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoverChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.MetadataService/RemoverChunk',
            proto_dot_filesystem__extended__pb2.ChunkRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetChunkInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.MetadataService/GetChunkInfo',
            proto_dot_filesystem__extended__pb2.ChunkRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.ChunkMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegistrarNo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.MetadataService/RegistrarNo',
            proto_dot_filesystem__extended__pb2.NodeRegistrationRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.NodeRegistrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ObterNosDisponiveis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.MetadataService/ObterNosDisponiveis',
            proto_dot_filesystem__extended__pb2.NodesRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.NodesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportarFalhaNo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.MetadataService/ReportarFalhaNo',
            proto_dot_filesystem__extended__pb2.NodeFailureRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNodeInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.MetadataService/GetNodeInfo',
            proto_dot_filesystem__extended__pb2.NodeInfoRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.NodeInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ObterNoParaOperacao(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.MetadataService/ObterNoParaOperacao',
            proto_dot_filesystem__extended__pb2.OperationRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.NodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ObterReplicasDisponiveis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.MetadataService/ObterReplicasDisponiveis',
            proto_dot_filesystem__extended__pb2.ReplicaRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.ReplicaResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfirmarReplica(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.MetadataService/ConfirmarReplica',
            proto_dot_filesystem__extended__pb2.ConfirmReplicaRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessarHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.MetadataService/ProcessarHeartbeat',
            proto_dot_filesystem__extended__pb2.HeartbeatData.SerializeToString,
            proto_dot_filesystem__extended__pb2.OperacaoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ObterStatusSistema(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.MetadataService/ObterStatusSistema',
            proto_dot_filesystem__extended__pb2.StatusRequest.SerializeToString,
            proto_dot_filesystem__extended__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
