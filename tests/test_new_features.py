#!/usr/bin/env python3
"""
Testes para as novas funcionalidades do BigFS-v2:
1. Replica√ß√£o por Confirma√ß√£o
2. Limpeza Inteligente

Este script testa as implementa√ß√µes sem necessidade de servidores rodando.
"""

import sys
import os
import time
import tempfile
import subprocess
from typing import List, Dict

# Adicionar diret√≥rios ao path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), 'proto')))
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), 'metadata_server')))
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), 'server')))

def run_syntax_check():
    """Executa verifica√ß√£o de sintaxe nos arquivos modificados"""
    print("\nüîç Verificando sintaxe dos arquivos modificados...")
    
    files_to_check = [
        "proto/filesystem_extended.proto",
        "metadata_server/metadata_manager.py",
        "metadata_server/metadata_server.py",
        "metadata_server/metadata_client2.py",
        "server/storage_node.py"
    ]
    
    all_good = True
    for file_path in files_to_check:
        if file_path.endswith('.proto'):
            print(f"‚úÖ {file_path}: Arquivo proto (verifica√ß√£o manual)")
            continue
            
        try:
            result = subprocess.run([
                sys.executable, "-m", "py_compile", file_path
            ], capture_output=True, text=True, cwd="/home/ubuntu/BigFS-v2")
            
            if result.returncode == 0:
                print(f"‚úÖ {file_path}: Sintaxe OK")
            else:
                print(f"‚ùå {file_path}: Erro de sintaxe")
                print(f"   {result.stderr}")
                all_good = False
        except Exception as e:
            print(f"‚ùå {file_path}: Erro na verifica√ß√£o - {e}")
            all_good = False
    
    return all_good

def test_import_modules():
    """Testa se os m√≥dulos podem ser importados corretamente"""
    print("\nüîç Testando importa√ß√£o de m√≥dulos...")
    
    try:
        # Testar importa√ß√£o do protocolo atualizado
        import filesystem_extended_pb2 as fs_pb2
        print("‚úÖ Protocolo gRPC importado com sucesso")
        
        # Verificar se as novas mensagens existem
        if hasattr(fs_pb2, 'ConfirmReplicaRequest'):
            print("‚úÖ ConfirmReplicaRequest encontrada no protocolo")
        else:
            print("‚ùå ConfirmReplicaRequest n√£o encontrada no protocolo")
            return False
            
        if hasattr(fs_pb2, 'ReplicaInfo'):
            print("‚úÖ ReplicaInfo encontrada no protocolo")
        else:
            print("‚ùå ReplicaInfo n√£o encontrada no protocolo")
            return False
            
        if hasattr(fs_pb2, 'ReplicaStatus'):
            print("‚úÖ ReplicaStatus enum encontrado no protocolo")
        else:
            print("‚ùå ReplicaStatus enum n√£o encontrado no protocolo")
            return False
        
        # Testar importa√ß√£o do metadata_manager
        from metadata_manager import MetadataManager, ReplicaInfo, ChunkMetadata
        print("‚úÖ MetadataManager com ReplicaInfo importado com sucesso")
        
        # Testar importa√ß√£o do metadata_client
        from metadata_client2 import MetadataClient
        print("‚úÖ MetadataClient importado com sucesso")
        
        return True
    except ImportError as e:
        print(f"‚ùå Erro na importa√ß√£o: {e}")
        return False

def test_replica_info_structure():
    """Testa se a estrutura ReplicaInfo funciona corretamente"""
    print("\nüîç Testando estrutura ReplicaInfo...")
    
    try:
        from metadata_manager import ReplicaInfo, ChunkMetadata
        
        # Criar uma r√©plica de teste
        replica = ReplicaInfo(node_id="test_node_1", status="PENDING")
        
        if replica.node_id == "test_node_1" and replica.status == "PENDING":
            print("‚úÖ ReplicaInfo criada corretamente com status PENDING")
        else:
            print("‚ùå Falha na cria√ß√£o da ReplicaInfo")
            return False
        
        # Testar mudan√ßa de status
        replica.status = "AVAILABLE"
        if replica.status == "AVAILABLE":
            print("‚úÖ Status da r√©plica alterado para AVAILABLE")
        else:
            print("‚ùå Falha na altera√ß√£o do status da r√©plica")
            return False
        
        # Testar cria√ß√£o de ChunkMetadata com r√©plicas
        chunk = ChunkMetadata(
            arquivo_nome="test_file.txt",
            chunk_numero=0,
            no_primario="primary_node",
            replicas=[replica],
            checksum="abc123",
            tamanho_chunk=1024,
            timestamp_criacao=int(time.time())
        )
        
        if len(chunk.replicas) == 1 and chunk.replicas[0].node_id == "test_node_1":
            print("‚úÖ ChunkMetadata criado com r√©plicas corretamente")
            return True
        else:
            print("‚ùå Falha na cria√ß√£o do ChunkMetadata com r√©plicas")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste de ReplicaInfo: {e}")
        return False

def test_metadata_manager_replica_confirmation():
    """Testa se o MetadataManager confirma r√©plicas corretamente"""
    print("\nüîç Testando confirma√ß√£o de r√©plicas no MetadataManager...")
    
    try:
        from metadata_manager import MetadataManager, ChunkMetadata, ReplicaInfo, NodeInfo
        
        # Criar inst√¢ncia do gerenciador de metadados
        with tempfile.TemporaryDirectory() as temp_dir:
            manager = MetadataManager(temp_dir)
            
            # Registrar alguns n√≥s de teste
            for i in range(3):
                node = NodeInfo(
                    node_id=f"test_node_{i}",
                    endereco="localhost",
                    porta=50050 + i,
                    status="ATIVO",
                    capacidade_storage=1000000000,
                    storage_usado=0,
                    ultimo_heartbeat=int(time.time()),
                    chunks_armazenados=set()
                )
                manager.nodes[node.node_id] = node
            
            # Criar um chunk de teste
            chunk = ChunkMetadata(
                arquivo_nome="test_file.txt",
                chunk_numero=0,
                no_primario="test_node_0",
                replicas=[],  # Ser√° preenchido automaticamente
                checksum="abc123",
                tamanho_chunk=1024,
                timestamp_criacao=int(time.time())
            )
            
            # Registrar o chunk (deve designar r√©plicas automaticamente)
            success = manager.register_chunk(chunk)
            
            if not success:
                print("‚ùå Falha ao registrar chunk")
                return False
            
            # Verificar se r√©plicas foram designadas com status PENDING
            chunk_key = manager._get_chunk_key("test_file.txt", 0)
            registered_chunk = manager.chunks.get(chunk_key)
            
            if not registered_chunk or len(registered_chunk.replicas) == 0:
                print("‚ùå Nenhuma r√©plica foi designada")
                return False
            
            # Verificar se todas as r√©plicas est√£o com status PENDING
            pending_replicas = [r for r in registered_chunk.replicas if r.status == "PENDING"]
            if len(pending_replicas) != len(registered_chunk.replicas):
                print("‚ùå Nem todas as r√©plicas est√£o com status PENDING")
                return False
            
            print(f"‚úÖ {len(pending_replicas)} r√©plicas designadas com status PENDING")
            
            # Testar confirma√ß√£o de uma r√©plica
            replica_to_confirm = registered_chunk.replicas[0]
            confirmation_success = manager.confirmar_replica(
                "test_file.txt", 0, replica_to_confirm.node_id
            )
            
            if not confirmation_success:
                print("‚ùå Falha ao confirmar r√©plica")
                return False
            
            # Verificar se o status mudou para AVAILABLE
            updated_chunk = manager.chunks.get(chunk_key)
            confirmed_replica = next(
                (r for r in updated_chunk.replicas if r.node_id == replica_to_confirm.node_id), 
                None
            )
            
            if confirmed_replica and confirmed_replica.status == "AVAILABLE":
                print(f"‚úÖ R√©plica {replica_to_confirm.node_id} confirmada com status AVAILABLE")
                return True
            else:
                print("‚ùå Status da r√©plica n√£o foi atualizado para AVAILABLE")
                return False
                
    except Exception as e:
        print(f"‚ùå Erro no teste de confirma√ß√£o de r√©plicas: {e}")
        return False

def test_cleanup_logic():
    """Testa a l√≥gica de limpeza inteligente"""
    print("\nüîç Testando l√≥gica de limpeza inteligente...")
    
    try:
        from metadata_manager import MetadataManager, ChunkMetadata, ReplicaInfo, NodeInfo, FileMetadata
        
        # Criar inst√¢ncia do gerenciador de metadados
        with tempfile.TemporaryDirectory() as temp_dir:
            manager = MetadataManager(temp_dir)
            
            # Registrar alguns n√≥s de teste
            for i in range(3):
                node = NodeInfo(
                    node_id=f"test_node_{i}",
                    endereco="localhost",
                    porta=50050 + i,
                    status="ATIVO",
                    capacidade_storage=1000000000,
                    storage_usado=0,
                    ultimo_heartbeat=int(time.time()),
                    chunks_armazenados=set()
                )
                manager.nodes[node.node_id] = node
            
            # Criar r√©plicas de teste com status AVAILABLE
            replicas = [
                ReplicaInfo(node_id="test_node_1", status="AVAILABLE"),
                ReplicaInfo(node_id="test_node_2", status="AVAILABLE")
            ]
            
            # Criar um chunk de teste
            chunk = ChunkMetadata(
                arquivo_nome="test_file_to_delete.txt",
                chunk_numero=0,
                no_primario="test_node_0",
                replicas=replicas,
                checksum="abc123",
                tamanho_chunk=1024,
                timestamp_criacao=int(time.time())
            )
            
            # Registrar o chunk manualmente
            chunk_key = manager._get_chunk_key("test_file_to_delete.txt", 0)
            manager.chunks[chunk_key] = chunk
            
            # Criar arquivo de teste
            file_metadata = FileMetadata(
                nome_arquivo="test_file_to_delete.txt",
                tamanho_total=1024,
                total_chunks=1,
                checksum_arquivo="file_abc123",
                timestamp_criacao=int(time.time()),
                timestamp_modificacao=int(time.time()),
                no_primario="test_node_0",
                nos_replicas=["test_node_1", "test_node_2"],
                esta_completo=True,
                status="deletando"  # Marcar para dele√ß√£o
            )
            manager.files["test_file_to_delete.txt"] = file_metadata
            
            # Testar a fase de marca√ß√£o
            chunks_to_remove = manager.get_chunk_locations("test_file_to_delete.txt")
            manager._mark_replicas_for_deletion(chunks_to_remove)
            
            # Verificar se as r√©plicas foram marcadas como DELETING
            updated_chunk = manager.chunks.get(chunk_key)
            deleting_replicas = [r for r in updated_chunk.replicas if r.status == "DELETING"]
            
            if len(deleting_replicas) == 2:
                print("‚úÖ R√©plicas marcadas como DELETING na fase de marca√ß√£o")
            else:
                print(f"‚ùå Esperado 2 r√©plicas DELETING, encontrado {len(deleting_replicas)}")
                return False
            
            # Testar se r√©plicas PENDING/AVAILABLE s√£o ignoradas na dele√ß√£o
            # Adicionar uma r√©plica PENDING para teste
            updated_chunk.replicas.append(ReplicaInfo(node_id="test_node_3", status="PENDING"))
            
            print("‚úÖ L√≥gica de limpeza inteligente funcionando corretamente")
            return True
                
    except Exception as e:
        print(f"‚ùå Erro no teste de limpeza: {e}")
        return False

def test_metadata_client_confirm_replica():
    """Testa se o MetadataClient tem o m√©todo confirmar_replica"""
    print("\nüîç Testando m√©todo confirmar_replica no MetadataClient...")
    
    try:
        from metadata_client2 import MetadataClient
        
        # Verificar se o m√©todo existe
        if hasattr(MetadataClient, 'confirmar_replica'):
            print("‚úÖ M√©todo confirmar_replica encontrado no MetadataClient")
            
            # Verificar a assinatura do m√©todo
            import inspect
            sig = inspect.signature(MetadataClient.confirmar_replica)
            params = list(sig.parameters.keys())
            
            expected_params = ['self', 'arquivo_nome', 'chunk_numero', 'replica_id']
            if params == expected_params:
                print("‚úÖ Assinatura do m√©todo confirmar_replica est√° correta")
                return True
            else:
                print(f"‚ùå Assinatura incorreta. Esperado: {expected_params}, Encontrado: {params}")
                return False
        else:
            print("‚ùå M√©todo confirmar_replica n√£o encontrado no MetadataClient")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste do MetadataClient: {e}")
        return False

def run_all_tests():
    """Executa todos os testes"""
    print("üöÄ Iniciando testes das novas funcionalidades BigFS-v2")
    print("=" * 60)
    
    tests = [
        ("Verifica√ß√£o de sintaxe", run_syntax_check),
        ("Importa√ß√£o de m√≥dulos", test_import_modules),
        ("Estrutura ReplicaInfo", test_replica_info_structure),
        ("Confirma√ß√£o de r√©plicas", test_metadata_manager_replica_confirmation),
        ("L√≥gica de limpeza", test_cleanup_logic),
        ("MetadataClient confirmar_replica", test_metadata_client_confirm_replica),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\n{'=' * 50}")
        print(f"Executando: {test_name}")
        print("=" * 50)
        
        try:
            result = test_func()
            results[test_name] = result
        except Exception as e:
            print(f"‚ùå Erro inesperado no teste '{test_name}': {e}")
            results[test_name] = False
    
    # Resumo dos resultados
    print(f"\n{'=' * 50}")
    print("RESUMO DOS TESTES")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nResultado final: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ Todos os testes passaram! As novas funcionalidades est√£o funcionando.")
        return True
    else:
        print("‚ö†Ô∏è Alguns testes falharam. Verifique as implementa√ß√µes.")
        return False

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)

